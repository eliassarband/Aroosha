// <auto-generated />
using System;
using GeneralDAL.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GeneralDAL.Migrations
{
    [DbContext(typeof(ArooshaContext))]
    [Migration("20210307072631_UserSetting")]
    partial class UserSetting
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GeneralDAL.Database.BasicInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowChange")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowDelete")
                        .HasColumnType("bit");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedBasicInformationId")
                        .HasColumnType("int");

                    b.Property<string>("StrCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("RelatedBasicInformationId");

                    b.ToTable("BasicInformation","Gnr");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            AllowChange = false,
                            AllowDelete = false,
                            CategoryId = 1,
                            Code = 1,
                            IsDeleted = false,
                            Name = "کشور",
                            Priority = 1,
                            StrCode = "Country"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            AllowChange = false,
                            AllowDelete = false,
                            CategoryId = 1,
                            Code = 2,
                            IsDeleted = false,
                            Name = "استان",
                            Priority = 2,
                            StrCode = "Province"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            AllowChange = false,
                            AllowDelete = false,
                            CategoryId = 1,
                            Code = 3,
                            IsDeleted = false,
                            Name = "شهر",
                            Priority = 3,
                            StrCode = "City"
                        },
                        new
                        {
                            Id = 201,
                            Active = true,
                            AllowChange = false,
                            AllowDelete = false,
                            CategoryId = 2,
                            Code = 1,
                            IsDeleted = false,
                            Name = "فاز",
                            Priority = 1,
                            StrCode = "Phase"
                        },
                        new
                        {
                            Id = 202,
                            Active = true,
                            AllowChange = false,
                            AllowDelete = false,
                            CategoryId = 2,
                            Code = 2,
                            IsDeleted = false,
                            Name = "زون",
                            Priority = 2,
                            StrCode = "Zone"
                        },
                        new
                        {
                            Id = 203,
                            Active = true,
                            AllowChange = false,
                            AllowDelete = false,
                            CategoryId = 2,
                            Code = 3,
                            IsDeleted = false,
                            Name = "تالار",
                            Priority = 3,
                            StrCode = "Corridor"
                        },
                        new
                        {
                            Id = 204,
                            Active = true,
                            AllowChange = false,
                            AllowDelete = false,
                            CategoryId = 2,
                            Code = 4,
                            IsDeleted = false,
                            Name = "غرفه",
                            Priority = 4,
                            StrCode = "Shop"
                        },
                        new
                        {
                            Id = 301,
                            Active = true,
                            AllowChange = false,
                            AllowDelete = false,
                            CategoryId = 3,
                            Code = 1,
                            IsDeleted = false,
                            Name = "مغازه",
                            Priority = 1,
                            StrCode = "S"
                        },
                        new
                        {
                            Id = 302,
                            Active = true,
                            AllowChange = false,
                            AllowDelete = false,
                            CategoryId = 3,
                            Code = 2,
                            IsDeleted = false,
                            Name = "کیوسک",
                            Priority = 2,
                            StrCode = "K"
                        },
                        new
                        {
                            Id = 303,
                            Active = true,
                            AllowChange = false,
                            AllowDelete = false,
                            CategoryId = 3,
                            Code = 3,
                            IsDeleted = false,
                            Name = "کانکس",
                            Priority = 3,
                            StrCode = "C"
                        },
                        new
                        {
                            Id = 401,
                            Active = true,
                            AllowChange = false,
                            AllowDelete = false,
                            CategoryId = 4,
                            Code = 1,
                            IsDeleted = false,
                            Name = "نقدی",
                            Priority = 1,
                            StrCode = "Cash"
                        },
                        new
                        {
                            Id = 402,
                            Active = true,
                            AllowChange = false,
                            AllowDelete = false,
                            CategoryId = 4,
                            Code = 2,
                            IsDeleted = false,
                            Name = "کارتخوان",
                            Priority = 2,
                            StrCode = "PCPos"
                        },
                        new
                        {
                            Id = 501,
                            Active = true,
                            AllowChange = false,
                            AllowDelete = false,
                            CategoryId = 5,
                            Code = 1,
                            IsDeleted = false,
                            Name = "نمایش فرم ها به صورت Page",
                            Priority = 1,
                            StrCode = "Page"
                        },
                        new
                        {
                            Id = 502,
                            Active = true,
                            AllowChange = false,
                            AllowDelete = false,
                            CategoryId = 5,
                            Code = 2,
                            IsDeleted = false,
                            Name = "نمایش فرم ها به صورت Window",
                            Priority = 2,
                            StrCode = "Window"
                        });
                });

            modelBuilder.Entity("GeneralDAL.Database.BasicInformationCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("RelatedCategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("Viewable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("RelatedCategoryId");

                    b.ToTable("BasicInformationCategory","Gnr");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "RegionType",
                            Name = "نوع منطقه",
                            Viewable = false
                        },
                        new
                        {
                            Id = 2,
                            Code = "MarketStructure",
                            Name = "ساختار بازار",
                            Viewable = false
                        },
                        new
                        {
                            Id = 3,
                            Code = "ShopType",
                            Name = "نوع غرفه",
                            Viewable = true
                        },
                        new
                        {
                            Id = 4,
                            Code = "PaymentType",
                            Name = "نوع پرداخت",
                            Viewable = false
                        },
                        new
                        {
                            Id = 5,
                            Code = "HomeType",
                            Name = "نوع فرم اصلی",
                            Viewable = false
                        });
                });

            modelBuilder.Entity("GeneralDAL.Database.Credit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ReceiptNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<bool>("Type")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("Credit","Mrk");
                });

            modelBuilder.Entity("GeneralDAL.Database.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("JobGroupId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(11)")
                        .HasMaxLength(11);

                    b.Property<string>("NationalCode")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("JobGroupId");

                    b.ToTable("Customer","Mrk");
                });

            modelBuilder.Entity("GeneralDAL.Database.CustomerCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CardCode")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("EndDate")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("StartDate")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerCard","Mrk");
                });

            modelBuilder.Entity("GeneralDAL.Database.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.ToTable("Group","Sec");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "مدیر سیستم"
                        },
                        new
                        {
                            Id = 2,
                            Name = "کاربران عمومی"
                        });
                });

            modelBuilder.Entity("GeneralDAL.Database.GroupUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupUser","Sec");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GroupId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            GroupId = 2,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("GeneralDAL.Database.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<int>("JobGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("JobGroupId");

                    b.ToTable("Job","Gnr");
                });

            modelBuilder.Entity("GeneralDAL.Database.JobGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("JobGroup","Gnr");
                });

            modelBuilder.Entity("GeneralDAL.Database.LoginAttempt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientIPAddr")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("DeviceName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("LoginResult")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("Logined")
                        .HasColumnType("bit");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(8)")
                        .HasMaxLength(8);

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LoginAttempt","Sec");
                });

            modelBuilder.Entity("GeneralDAL.Database.LoginedData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientIPAddr")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("DeviceName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("LogoutDate")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("LogoutTime")
                        .HasColumnType("nvarchar(8)")
                        .HasMaxLength(8);

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(8)")
                        .HasMaxLength(8);

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LoginedData","Sec");
                });

            modelBuilder.Entity("GeneralDAL.Database.MarketSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("EndDate")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("MarketId")
                        .HasColumnType("int");

                    b.Property<string>("StartDate")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("WeekDay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MarketId");

                    b.ToTable("MarketSchedule","Mrk");
                });

            modelBuilder.Entity("GeneralDAL.Database.MarketScheduleDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("MarketScheduleId")
                        .HasColumnType("int");

                    b.Property<int>("WeekDay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MarketScheduleId");

                    b.ToTable("MarketScheduleDetail","Mrk");
                });

            modelBuilder.Entity("GeneralDAL.Database.MarketStructure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("StructureAddress")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TypeId");

                    b.ToTable("MarketStructure","Mrk");
                });

            modelBuilder.Entity("GeneralDAL.Database.MenuAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("UserId");

                    b.ToTable("MenuAccess","Sec");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MenuItemId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            MenuItemId = 2,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            MenuItemId = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            MenuItemId = 4,
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            MenuItemId = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            MenuItemId = 6,
                            UserId = 1
                        },
                        new
                        {
                            Id = 7,
                            MenuItemId = 7,
                            UserId = 1
                        },
                        new
                        {
                            Id = 8,
                            MenuItemId = 8,
                            UserId = 1
                        },
                        new
                        {
                            Id = 9,
                            MenuItemId = 9,
                            UserId = 1
                        },
                        new
                        {
                            Id = 10,
                            MenuItemId = 10,
                            UserId = 1
                        },
                        new
                        {
                            Id = 11,
                            MenuItemId = 11,
                            UserId = 1
                        },
                        new
                        {
                            Id = 12,
                            MenuItemId = 12,
                            UserId = 1
                        },
                        new
                        {
                            Id = 13,
                            MenuItemId = 13,
                            UserId = 1
                        },
                        new
                        {
                            Id = 14,
                            MenuItemId = 14,
                            UserId = 1
                        },
                        new
                        {
                            Id = 15,
                            MenuItemId = 15,
                            UserId = 1
                        },
                        new
                        {
                            Id = 16,
                            MenuItemId = 16,
                            UserId = 1
                        },
                        new
                        {
                            Id = 17,
                            MenuItemId = 17,
                            UserId = 1
                        },
                        new
                        {
                            Id = 18,
                            MenuItemId = 18,
                            UserId = 1
                        },
                        new
                        {
                            Id = 19,
                            MenuItemId = 19,
                            UserId = 1
                        },
                        new
                        {
                            Id = 20,
                            MenuItemId = 20,
                            UserId = 1
                        },
                        new
                        {
                            Id = 21,
                            MenuItemId = 21,
                            UserId = 1
                        },
                        new
                        {
                            Id = 22,
                            MenuItemId = 22,
                            UserId = 1
                        },
                        new
                        {
                            Id = 23,
                            MenuItemId = 23,
                            UserId = 1
                        },
                        new
                        {
                            Id = 24,
                            MenuItemId = 24,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("GeneralDAL.Database.MenuAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<bool>("ShowInToolbar")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.ToTable("MenuAction","Sec");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MenuItemId = 1,
                            Name = "New",
                            Priority = 1,
                            ShowInToolbar = true,
                            Title = "تعریف کاربر جدید"
                        },
                        new
                        {
                            Id = 2,
                            MenuItemId = 1,
                            Name = "Edit",
                            Priority = 2,
                            ShowInToolbar = true,
                            Title = "ویرایش کاربر"
                        },
                        new
                        {
                            Id = 3,
                            MenuItemId = 1,
                            Name = "Delete",
                            Priority = 3,
                            ShowInToolbar = true,
                            Title = "حذف کاربر"
                        },
                        new
                        {
                            Id = 4,
                            MenuItemId = 2,
                            Name = "Save",
                            Priority = 1,
                            ShowInToolbar = true,
                            Title = "ذخیره"
                        },
                        new
                        {
                            Id = 6,
                            MenuItemId = 2,
                            Name = "SaveAndContinue",
                            Priority = 2,
                            ShowInToolbar = true,
                            Title = "ذخیره و ادامه"
                        },
                        new
                        {
                            Id = 5,
                            MenuItemId = 2,
                            Name = "SaveAndNew",
                            Priority = 3,
                            ShowInToolbar = true,
                            Title = "ذخیره و جدید"
                        },
                        new
                        {
                            Id = 15,
                            MenuItemId = 2,
                            Name = "UserAccess",
                            Priority = 4,
                            ShowInToolbar = true,
                            Title = "مدیریت دسترسی کاربران"
                        },
                        new
                        {
                            Id = 7,
                            MenuItemId = 3,
                            Name = "New",
                            Priority = 1,
                            ShowInToolbar = true,
                            Title = "تعریف گروه جدید"
                        },
                        new
                        {
                            Id = 8,
                            MenuItemId = 3,
                            Name = "Edit",
                            Priority = 2,
                            ShowInToolbar = true,
                            Title = "ویرایش گروه"
                        },
                        new
                        {
                            Id = 9,
                            MenuItemId = 3,
                            Name = "Delete",
                            Priority = 3,
                            ShowInToolbar = true,
                            Title = "حذف گروه"
                        },
                        new
                        {
                            Id = 12,
                            MenuItemId = 4,
                            Name = "Save",
                            Priority = 1,
                            ShowInToolbar = true,
                            Title = "ذخیره"
                        },
                        new
                        {
                            Id = 14,
                            MenuItemId = 4,
                            Name = "SaveAndNew",
                            Priority = 2,
                            ShowInToolbar = true,
                            Title = "ذخیره و جدید"
                        },
                        new
                        {
                            Id = 13,
                            MenuItemId = 4,
                            Name = "SaveAndContinue",
                            Priority = 3,
                            ShowInToolbar = true,
                            Title = "ذخیره و ادامه"
                        },
                        new
                        {
                            Id = 16,
                            MenuItemId = 4,
                            Name = "GroupAccess",
                            Priority = 4,
                            ShowInToolbar = true,
                            Title = "مدیریت دسترسی گروه های کاربری"
                        },
                        new
                        {
                            Id = 17,
                            MenuItemId = 5,
                            Name = "Save",
                            Priority = 1,
                            ShowInToolbar = true,
                            Title = "ذخیره"
                        },
                        new
                        {
                            Id = 18,
                            MenuItemId = 6,
                            Name = "Save",
                            Priority = 1,
                            ShowInToolbar = true,
                            Title = "ذخیره"
                        },
                        new
                        {
                            Id = 19,
                            MenuItemId = 7,
                            Name = "New",
                            Priority = 1,
                            ShowInToolbar = true,
                            Title = "تعریف گروه مشاغل جدید"
                        },
                        new
                        {
                            Id = 20,
                            MenuItemId = 7,
                            Name = "Edit",
                            Priority = 2,
                            ShowInToolbar = true,
                            Title = "ویرایش گروه مشاغل"
                        },
                        new
                        {
                            Id = 21,
                            MenuItemId = 7,
                            Name = "Delete",
                            Priority = 3,
                            ShowInToolbar = true,
                            Title = "حذف گروه مشاغل"
                        },
                        new
                        {
                            Id = 22,
                            MenuItemId = 7,
                            Name = "Jobs",
                            Priority = 4,
                            ShowInToolbar = true,
                            Title = "تعریف مشاغل گروه"
                        },
                        new
                        {
                            Id = 23,
                            MenuItemId = 8,
                            Name = "Save",
                            Priority = 1,
                            ShowInToolbar = true,
                            Title = "ذخیره"
                        },
                        new
                        {
                            Id = 24,
                            MenuItemId = 8,
                            Name = "SaveAndNew",
                            Priority = 2,
                            ShowInToolbar = true,
                            Title = "ذخیره و جدید"
                        },
                        new
                        {
                            Id = 25,
                            MenuItemId = 8,
                            Name = "SaveAndContinue",
                            Priority = 3,
                            ShowInToolbar = true,
                            Title = "ذخیره و ادامه"
                        },
                        new
                        {
                            Id = 26,
                            MenuItemId = 8,
                            Name = "Jobs",
                            Priority = 4,
                            ShowInToolbar = true,
                            Title = "تعریف مشاغل گروه"
                        },
                        new
                        {
                            Id = 27,
                            MenuItemId = 9,
                            Name = "New",
                            Priority = 1,
                            ShowInToolbar = true,
                            Title = "تعریف شغل جدید"
                        },
                        new
                        {
                            Id = 28,
                            MenuItemId = 9,
                            Name = "Edit",
                            Priority = 2,
                            ShowInToolbar = true,
                            Title = "ویرایش شغل"
                        },
                        new
                        {
                            Id = 29,
                            MenuItemId = 9,
                            Name = "Delete",
                            Priority = 3,
                            ShowInToolbar = true,
                            Title = "حذف شغل"
                        },
                        new
                        {
                            Id = 30,
                            MenuItemId = 10,
                            Name = "Save",
                            Priority = 1,
                            ShowInToolbar = true,
                            Title = "ذخیره"
                        },
                        new
                        {
                            Id = 31,
                            MenuItemId = 10,
                            Name = "SaveAndNew",
                            Priority = 2,
                            ShowInToolbar = true,
                            Title = "ذخیره و جدید"
                        },
                        new
                        {
                            Id = 32,
                            MenuItemId = 10,
                            Name = "SaveAndContinue",
                            Priority = 3,
                            ShowInToolbar = true,
                            Title = "ذخیره و ادامه"
                        },
                        new
                        {
                            Id = 33,
                            MenuItemId = 11,
                            Name = "New",
                            Priority = 1,
                            ShowInToolbar = true,
                            Title = "تعریف گروه غرفات"
                        },
                        new
                        {
                            Id = 34,
                            MenuItemId = 11,
                            Name = "Edit",
                            Priority = 2,
                            ShowInToolbar = true,
                            Title = "ویرایش گروه غرفات"
                        },
                        new
                        {
                            Id = 35,
                            MenuItemId = 11,
                            Name = "Delete",
                            Priority = 3,
                            ShowInToolbar = true,
                            Title = "حذف گروه غرفات"
                        },
                        new
                        {
                            Id = 36,
                            MenuItemId = 11,
                            Name = "Shops",
                            Priority = 4,
                            ShowInToolbar = true,
                            Title = "غرفه های گروه"
                        },
                        new
                        {
                            Id = 37,
                            MenuItemId = 12,
                            Name = "Save",
                            Priority = 1,
                            ShowInToolbar = true,
                            Title = "ذخیره"
                        },
                        new
                        {
                            Id = 38,
                            MenuItemId = 12,
                            Name = "SaveAndNew",
                            Priority = 2,
                            ShowInToolbar = true,
                            Title = "ذخیره و جدید"
                        },
                        new
                        {
                            Id = 39,
                            MenuItemId = 12,
                            Name = "SaveAndContinue",
                            Priority = 3,
                            ShowInToolbar = true,
                            Title = "ذخیره و ادامه"
                        },
                        new
                        {
                            Id = 40,
                            MenuItemId = 12,
                            Name = "Shops",
                            Priority = 4,
                            ShowInToolbar = true,
                            Title = "غرفه های گروه"
                        },
                        new
                        {
                            Id = 41,
                            MenuItemId = 13,
                            Name = "New",
                            Priority = 1,
                            ShowInToolbar = true,
                            Title = "تعریف غرفه"
                        },
                        new
                        {
                            Id = 42,
                            MenuItemId = 13,
                            Name = "Edit",
                            Priority = 2,
                            ShowInToolbar = true,
                            Title = "ویرایش غرفه"
                        },
                        new
                        {
                            Id = 43,
                            MenuItemId = 13,
                            Name = "Delete",
                            Priority = 3,
                            ShowInToolbar = true,
                            Title = "حذف غرفه"
                        },
                        new
                        {
                            Id = 44,
                            MenuItemId = 14,
                            Name = "Save",
                            Priority = 1,
                            ShowInToolbar = true,
                            Title = "ذخیره"
                        },
                        new
                        {
                            Id = 45,
                            MenuItemId = 14,
                            Name = "SaveAndNew",
                            Priority = 2,
                            ShowInToolbar = true,
                            Title = "ذخیره و جدید"
                        },
                        new
                        {
                            Id = 46,
                            MenuItemId = 14,
                            Name = "SaveAndContinue",
                            Priority = 3,
                            ShowInToolbar = true,
                            Title = "ذخیره و ادامه"
                        },
                        new
                        {
                            Id = 47,
                            MenuItemId = 15,
                            Name = "New",
                            Priority = 1,
                            ShowInToolbar = true,
                            Title = "تعریف ساختار جدید"
                        },
                        new
                        {
                            Id = 48,
                            MenuItemId = 15,
                            Name = "Edit",
                            Priority = 2,
                            ShowInToolbar = true,
                            Title = "ویرایش ساختار"
                        },
                        new
                        {
                            Id = 49,
                            MenuItemId = 15,
                            Name = "Delete",
                            Priority = 3,
                            ShowInToolbar = true,
                            Title = "حذف ساختار"
                        },
                        new
                        {
                            Id = 50,
                            MenuItemId = 16,
                            Name = "Save",
                            Priority = 1,
                            ShowInToolbar = true,
                            Title = "ذخیره"
                        },
                        new
                        {
                            Id = 51,
                            MenuItemId = 16,
                            Name = "SaveAndNew",
                            Priority = 2,
                            ShowInToolbar = true,
                            Title = "ذخیره و جدید"
                        },
                        new
                        {
                            Id = 52,
                            MenuItemId = 16,
                            Name = "SaveAndContinue",
                            Priority = 3,
                            ShowInToolbar = true,
                            Title = "ذخیره و ادامه"
                        },
                        new
                        {
                            Id = 53,
                            MenuItemId = 17,
                            Name = "New",
                            Priority = 1,
                            ShowInToolbar = true,
                            Title = "تعریف تعرفه"
                        },
                        new
                        {
                            Id = 54,
                            MenuItemId = 17,
                            Name = "Edit",
                            Priority = 2,
                            ShowInToolbar = true,
                            Title = "ویرایش تعرفه"
                        },
                        new
                        {
                            Id = 55,
                            MenuItemId = 17,
                            Name = "Delete",
                            Priority = 3,
                            ShowInToolbar = true,
                            Title = "حذف تعرفه"
                        },
                        new
                        {
                            Id = 56,
                            MenuItemId = 18,
                            Name = "Save",
                            Priority = 1,
                            ShowInToolbar = true,
                            Title = "ذخیره"
                        },
                        new
                        {
                            Id = 57,
                            MenuItemId = 18,
                            Name = "SaveAndNew",
                            Priority = 2,
                            ShowInToolbar = true,
                            Title = "ذخیره و جدید"
                        },
                        new
                        {
                            Id = 58,
                            MenuItemId = 18,
                            Name = "SaveAndContinue",
                            Priority = 3,
                            ShowInToolbar = true,
                            Title = "ذخیره و ادامه"
                        },
                        new
                        {
                            Id = 59,
                            MenuItemId = 19,
                            Name = "New",
                            Priority = 1,
                            ShowInToolbar = true,
                            Title = "تعریف مشتری"
                        },
                        new
                        {
                            Id = 60,
                            MenuItemId = 19,
                            Name = "Edit",
                            Priority = 2,
                            ShowInToolbar = true,
                            Title = "ویرایش مشتری"
                        },
                        new
                        {
                            Id = 61,
                            MenuItemId = 19,
                            Name = "Delete",
                            Priority = 3,
                            ShowInToolbar = true,
                            Title = "حذف مشتری"
                        },
                        new
                        {
                            Id = 62,
                            MenuItemId = 20,
                            Name = "Save",
                            Priority = 1,
                            ShowInToolbar = true,
                            Title = "ذخیره"
                        },
                        new
                        {
                            Id = 63,
                            MenuItemId = 20,
                            Name = "SaveAndNew",
                            Priority = 2,
                            ShowInToolbar = true,
                            Title = "ذخیره و جدید"
                        },
                        new
                        {
                            Id = 64,
                            MenuItemId = 20,
                            Name = "SaveAndContinue",
                            Priority = 3,
                            ShowInToolbar = true,
                            Title = "ذخیره و ادامه"
                        },
                        new
                        {
                            Id = 65,
                            MenuItemId = 20,
                            Name = "CustomerCards",
                            Priority = 4,
                            ShowInToolbar = true,
                            Title = "کارت عضویت"
                        },
                        new
                        {
                            Id = 72,
                            MenuItemId = 20,
                            Name = "Credits",
                            Priority = 5,
                            ShowInToolbar = true,
                            Title = "شارژهای اعتبار"
                        },
                        new
                        {
                            Id = 66,
                            MenuItemId = 21,
                            Name = "New",
                            Priority = 1,
                            ShowInToolbar = true,
                            Title = "تعریف کارت"
                        },
                        new
                        {
                            Id = 67,
                            MenuItemId = 21,
                            Name = "Edit",
                            Priority = 2,
                            ShowInToolbar = true,
                            Title = "ویرایش کارت"
                        },
                        new
                        {
                            Id = 68,
                            MenuItemId = 21,
                            Name = "Delete",
                            Priority = 3,
                            ShowInToolbar = true,
                            Title = "حذف کارت"
                        },
                        new
                        {
                            Id = 69,
                            MenuItemId = 22,
                            Name = "Save",
                            Priority = 1,
                            ShowInToolbar = true,
                            Title = "ذخیره"
                        },
                        new
                        {
                            Id = 70,
                            MenuItemId = 22,
                            Name = "SaveAndNew",
                            Priority = 2,
                            ShowInToolbar = true,
                            Title = "ذخیره و جدید"
                        },
                        new
                        {
                            Id = 71,
                            MenuItemId = 22,
                            Name = "SaveAndContinue",
                            Priority = 3,
                            ShowInToolbar = true,
                            Title = "ذخیره و ادامه"
                        },
                        new
                        {
                            Id = 73,
                            MenuItemId = 23,
                            Name = "New",
                            Priority = 1,
                            ShowInToolbar = true,
                            Title = "تعریف شارژ"
                        },
                        new
                        {
                            Id = 74,
                            MenuItemId = 23,
                            Name = "Edit",
                            Priority = 2,
                            ShowInToolbar = true,
                            Title = "ویرایش شارژ"
                        },
                        new
                        {
                            Id = 75,
                            MenuItemId = 23,
                            Name = "Delete",
                            Priority = 3,
                            ShowInToolbar = true,
                            Title = "حذف شارژ"
                        },
                        new
                        {
                            Id = 76,
                            MenuItemId = 24,
                            Name = "Save",
                            Priority = 1,
                            ShowInToolbar = true,
                            Title = "ذخیره"
                        },
                        new
                        {
                            Id = 77,
                            MenuItemId = 24,
                            Name = "SaveAndNew",
                            Priority = 2,
                            ShowInToolbar = true,
                            Title = "ذخیره و جدید"
                        },
                        new
                        {
                            Id = 78,
                            MenuItemId = 24,
                            Name = "SaveAndContinue",
                            Priority = 3,
                            ShowInToolbar = true,
                            Title = "ذخیره و ادامه"
                        },
                        new
                        {
                            Id = 79,
                            MenuItemId = 25,
                            Name = "New",
                            Priority = 1,
                            ShowInToolbar = true,
                            Title = "ثبت اجاره"
                        },
                        new
                        {
                            Id = 80,
                            MenuItemId = 25,
                            Name = "Edit",
                            Priority = 2,
                            ShowInToolbar = true,
                            Title = "ویرایش اجاره"
                        },
                        new
                        {
                            Id = 81,
                            MenuItemId = 25,
                            Name = "Delete",
                            Priority = 3,
                            ShowInToolbar = true,
                            Title = "حذف اجاره"
                        },
                        new
                        {
                            Id = 87,
                            MenuItemId = 25,
                            Name = "NewRents",
                            Priority = 4,
                            ShowInToolbar = true,
                            Title = "ثبت اجاره دسته ای"
                        },
                        new
                        {
                            Id = 82,
                            MenuItemId = 26,
                            Name = "Save",
                            Priority = 1,
                            ShowInToolbar = true,
                            Title = "ذخیره"
                        },
                        new
                        {
                            Id = 83,
                            MenuItemId = 26,
                            Name = "SaveAndNew",
                            Priority = 2,
                            ShowInToolbar = true,
                            Title = "ذخیره و جدید"
                        },
                        new
                        {
                            Id = 84,
                            MenuItemId = 26,
                            Name = "SaveAndContinue",
                            Priority = 3,
                            ShowInToolbar = true,
                            Title = "ذخیره و ادامه"
                        },
                        new
                        {
                            Id = 85,
                            MenuItemId = 14,
                            Name = "NewRent",
                            Priority = 4,
                            ShowInToolbar = true,
                            Title = "ثبت اجاره"
                        },
                        new
                        {
                            Id = 86,
                            MenuItemId = 20,
                            Name = "NewRent",
                            Priority = 6,
                            ShowInToolbar = true,
                            Title = "ثبت اجاره"
                        },
                        new
                        {
                            Id = 88,
                            MenuItemId = 27,
                            Name = "Save",
                            Priority = 1,
                            ShowInToolbar = true,
                            Title = "ذخیره"
                        },
                        new
                        {
                            Id = 89,
                            MenuItemId = 27,
                            Name = "SaveAndNew",
                            Priority = 2,
                            ShowInToolbar = true,
                            Title = "ذخیره و جدید"
                        },
                        new
                        {
                            Id = 90,
                            MenuItemId = 27,
                            Name = "SaveAndContinue",
                            Priority = 3,
                            ShowInToolbar = true,
                            Title = "ذخیره و ادامه"
                        });
                });

            modelBuilder.Entity("GeneralDAL.Database.MenuActionAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("MenuActionId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("MenuActionId");

                    b.HasIndex("UserId");

                    b.ToTable("MenuActionAccess","Sec");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MenuActionId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            MenuActionId = 2,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            MenuActionId = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            MenuActionId = 4,
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            MenuActionId = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            MenuActionId = 6,
                            UserId = 1
                        },
                        new
                        {
                            Id = 15,
                            MenuActionId = 15,
                            UserId = 1
                        },
                        new
                        {
                            Id = 7,
                            MenuActionId = 7,
                            UserId = 1
                        },
                        new
                        {
                            Id = 8,
                            MenuActionId = 8,
                            UserId = 1
                        },
                        new
                        {
                            Id = 9,
                            MenuActionId = 9,
                            UserId = 1
                        },
                        new
                        {
                            Id = 12,
                            MenuActionId = 12,
                            UserId = 1
                        },
                        new
                        {
                            Id = 13,
                            MenuActionId = 13,
                            UserId = 1
                        },
                        new
                        {
                            Id = 14,
                            MenuActionId = 14,
                            UserId = 1
                        },
                        new
                        {
                            Id = 16,
                            MenuActionId = 16,
                            UserId = 1
                        },
                        new
                        {
                            Id = 17,
                            MenuActionId = 17,
                            UserId = 1
                        },
                        new
                        {
                            Id = 18,
                            MenuActionId = 18,
                            UserId = 1
                        },
                        new
                        {
                            Id = 19,
                            MenuActionId = 19,
                            UserId = 1
                        },
                        new
                        {
                            Id = 20,
                            MenuActionId = 20,
                            UserId = 1
                        },
                        new
                        {
                            Id = 21,
                            MenuActionId = 21,
                            UserId = 1
                        },
                        new
                        {
                            Id = 22,
                            MenuActionId = 22,
                            UserId = 1
                        },
                        new
                        {
                            Id = 23,
                            MenuActionId = 23,
                            UserId = 1
                        },
                        new
                        {
                            Id = 24,
                            MenuActionId = 24,
                            UserId = 1
                        },
                        new
                        {
                            Id = 25,
                            MenuActionId = 25,
                            UserId = 1
                        },
                        new
                        {
                            Id = 26,
                            MenuActionId = 26,
                            UserId = 1
                        },
                        new
                        {
                            Id = 27,
                            MenuActionId = 27,
                            UserId = 1
                        },
                        new
                        {
                            Id = 28,
                            MenuActionId = 28,
                            UserId = 1
                        },
                        new
                        {
                            Id = 29,
                            MenuActionId = 29,
                            UserId = 1
                        },
                        new
                        {
                            Id = 30,
                            MenuActionId = 30,
                            UserId = 1
                        },
                        new
                        {
                            Id = 31,
                            MenuActionId = 31,
                            UserId = 1
                        },
                        new
                        {
                            Id = 32,
                            MenuActionId = 32,
                            UserId = 1
                        },
                        new
                        {
                            Id = 33,
                            MenuActionId = 33,
                            UserId = 1
                        },
                        new
                        {
                            Id = 34,
                            MenuActionId = 34,
                            UserId = 1
                        },
                        new
                        {
                            Id = 35,
                            MenuActionId = 35,
                            UserId = 1
                        },
                        new
                        {
                            Id = 36,
                            MenuActionId = 36,
                            UserId = 1
                        },
                        new
                        {
                            Id = 37,
                            MenuActionId = 37,
                            UserId = 1
                        },
                        new
                        {
                            Id = 38,
                            MenuActionId = 38,
                            UserId = 1
                        },
                        new
                        {
                            Id = 39,
                            MenuActionId = 39,
                            UserId = 1
                        },
                        new
                        {
                            Id = 40,
                            MenuActionId = 40,
                            UserId = 1
                        },
                        new
                        {
                            Id = 41,
                            MenuActionId = 41,
                            UserId = 1
                        },
                        new
                        {
                            Id = 42,
                            MenuActionId = 42,
                            UserId = 1
                        },
                        new
                        {
                            Id = 43,
                            MenuActionId = 43,
                            UserId = 1
                        },
                        new
                        {
                            Id = 44,
                            MenuActionId = 44,
                            UserId = 1
                        },
                        new
                        {
                            Id = 45,
                            MenuActionId = 45,
                            UserId = 1
                        },
                        new
                        {
                            Id = 46,
                            MenuActionId = 46,
                            UserId = 1
                        },
                        new
                        {
                            Id = 47,
                            MenuActionId = 47,
                            UserId = 1
                        },
                        new
                        {
                            Id = 48,
                            MenuActionId = 48,
                            UserId = 1
                        },
                        new
                        {
                            Id = 49,
                            MenuActionId = 49,
                            UserId = 1
                        },
                        new
                        {
                            Id = 50,
                            MenuActionId = 50,
                            UserId = 1
                        },
                        new
                        {
                            Id = 51,
                            MenuActionId = 51,
                            UserId = 1
                        },
                        new
                        {
                            Id = 52,
                            MenuActionId = 52,
                            UserId = 1
                        },
                        new
                        {
                            Id = 53,
                            MenuActionId = 53,
                            UserId = 1
                        },
                        new
                        {
                            Id = 54,
                            MenuActionId = 54,
                            UserId = 1
                        },
                        new
                        {
                            Id = 55,
                            MenuActionId = 55,
                            UserId = 1
                        },
                        new
                        {
                            Id = 56,
                            MenuActionId = 56,
                            UserId = 1
                        },
                        new
                        {
                            Id = 57,
                            MenuActionId = 57,
                            UserId = 1
                        },
                        new
                        {
                            Id = 58,
                            MenuActionId = 58,
                            UserId = 1
                        },
                        new
                        {
                            Id = 59,
                            MenuActionId = 59,
                            UserId = 1
                        },
                        new
                        {
                            Id = 60,
                            MenuActionId = 60,
                            UserId = 1
                        },
                        new
                        {
                            Id = 61,
                            MenuActionId = 61,
                            UserId = 1
                        },
                        new
                        {
                            Id = 62,
                            MenuActionId = 62,
                            UserId = 1
                        },
                        new
                        {
                            Id = 63,
                            MenuActionId = 63,
                            UserId = 1
                        },
                        new
                        {
                            Id = 64,
                            MenuActionId = 64,
                            UserId = 1
                        },
                        new
                        {
                            Id = 65,
                            MenuActionId = 65,
                            UserId = 1
                        },
                        new
                        {
                            Id = 72,
                            MenuActionId = 72,
                            UserId = 1
                        },
                        new
                        {
                            Id = 66,
                            MenuActionId = 66,
                            UserId = 1
                        },
                        new
                        {
                            Id = 67,
                            MenuActionId = 67,
                            UserId = 1
                        },
                        new
                        {
                            Id = 68,
                            MenuActionId = 68,
                            UserId = 1
                        },
                        new
                        {
                            Id = 69,
                            MenuActionId = 69,
                            UserId = 1
                        },
                        new
                        {
                            Id = 70,
                            MenuActionId = 70,
                            UserId = 1
                        },
                        new
                        {
                            Id = 71,
                            MenuActionId = 71,
                            UserId = 1
                        },
                        new
                        {
                            Id = 73,
                            MenuActionId = 73,
                            UserId = 1
                        },
                        new
                        {
                            Id = 74,
                            MenuActionId = 74,
                            UserId = 1
                        },
                        new
                        {
                            Id = 75,
                            MenuActionId = 75,
                            UserId = 1
                        },
                        new
                        {
                            Id = 76,
                            MenuActionId = 76,
                            UserId = 1
                        },
                        new
                        {
                            Id = 77,
                            MenuActionId = 77,
                            UserId = 1
                        },
                        new
                        {
                            Id = 78,
                            MenuActionId = 78,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("GeneralDAL.Database.MenuCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<bool>("ShowInMenu")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("MenuCategory","Sec");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "مدریریت کاربران",
                            Priority = 2,
                            ShowInMenu = true
                        },
                        new
                        {
                            Id = 2,
                            Name = "اطلاعات پایه",
                            Priority = 1,
                            ShowInMenu = true
                        },
                        new
                        {
                            Id = 3,
                            Name = "مدیریت بازار",
                            Priority = 3,
                            ShowInMenu = true
                        },
                        new
                        {
                            Id = 4,
                            Name = "مدیریت رزرو و اجاره",
                            Priority = 4,
                            ShowInMenu = true
                        },
                        new
                        {
                            Id = 5,
                            Name = "مدیریت مشتریان",
                            Priority = 5,
                            ShowInMenu = true
                        });
                });

            modelBuilder.Entity("GeneralDAL.Database.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ControllerName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("DialogSize")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<bool>("ShowInMenu")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("MenuItem","Sec");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActionName = "Users",
                            CategoryId = 1,
                            Code = "Users",
                            ControllerName = "Security",
                            DialogSize = "medium",
                            Name = "تعریف کاربران",
                            Priority = 2,
                            ShowInMenu = true
                        },
                        new
                        {
                            Id = 2,
                            ActionName = "UserDefine",
                            CategoryId = 1,
                            Code = "UserDefine",
                            ControllerName = "Security",
                            DialogSize = "medium",
                            Name = "ایجاد و ویرایش کاربران",
                            Priority = 3,
                            ShowInMenu = false
                        },
                        new
                        {
                            Id = 3,
                            ActionName = "Groups",
                            CategoryId = 1,
                            Code = "Groups",
                            ControllerName = "Security",
                            DialogSize = "medium",
                            Name = "تعریف گروه‌های کاربری",
                            Priority = 3,
                            ShowInMenu = true
                        },
                        new
                        {
                            Id = 4,
                            ActionName = "GroupDefine",
                            CategoryId = 1,
                            Code = "GroupDefine",
                            ControllerName = "Security",
                            DialogSize = "small",
                            Name = "ایجاد و ویرایش گروه‌های کاربری",
                            Priority = 4,
                            ShowInMenu = false
                        },
                        new
                        {
                            Id = 5,
                            ActionName = "UserAccess",
                            CategoryId = 1,
                            Code = "UserAccess",
                            ControllerName = "Security",
                            DialogSize = "large",
                            Name = "مدیریت دسترسی کاربران",
                            Priority = 5,
                            ShowInMenu = false
                        },
                        new
                        {
                            Id = 6,
                            ActionName = "GroupAccess",
                            CategoryId = 1,
                            Code = "GroupAccess",
                            ControllerName = "Security",
                            DialogSize = "large",
                            Name = "مدیریت دسترسی گروه های کاربری",
                            Priority = 6,
                            ShowInMenu = false
                        },
                        new
                        {
                            Id = 7,
                            ActionName = "JobGroups",
                            CategoryId = 2,
                            Code = "JobGroups",
                            ControllerName = "General",
                            DialogSize = "medium",
                            Name = "مدیریت گروه مشاغل",
                            Priority = 3,
                            ShowInMenu = true
                        },
                        new
                        {
                            Id = 8,
                            ActionName = "JobGroupDefine",
                            CategoryId = 2,
                            Code = "JobGroupDefine",
                            ControllerName = "General",
                            DialogSize = "medium",
                            Name = "تعریف گروه مشاغل",
                            Priority = 4,
                            ShowInMenu = false
                        },
                        new
                        {
                            Id = 9,
                            ActionName = "Jobs",
                            CategoryId = 2,
                            Code = "Jobs",
                            ControllerName = "General",
                            DialogSize = "medium",
                            Name = "مدیریت مشاغل",
                            Priority = 5,
                            ShowInMenu = true
                        },
                        new
                        {
                            Id = 10,
                            ActionName = "JobDefine",
                            CategoryId = 2,
                            Code = "JobDefine",
                            ControllerName = "General",
                            DialogSize = "medium",
                            Name = "تعریف مشاعل",
                            Priority = 6,
                            ShowInMenu = false
                        },
                        new
                        {
                            Id = 11,
                            ActionName = "ShopGroups",
                            CategoryId = 3,
                            Code = "ShopGroups",
                            ControllerName = "Market",
                            DialogSize = "medium",
                            Name = "گروه غرفات",
                            Priority = 1,
                            ShowInMenu = true
                        },
                        new
                        {
                            Id = 12,
                            ActionName = "ShopGroupDefine",
                            CategoryId = 3,
                            Code = "ShopGroupDefine",
                            ControllerName = "Market",
                            DialogSize = "medium",
                            Name = "تعریف گروه غرفات",
                            Priority = 2,
                            ShowInMenu = false
                        },
                        new
                        {
                            Id = 13,
                            ActionName = "Shops",
                            CategoryId = 3,
                            Code = "Shops",
                            ControllerName = "Market",
                            DialogSize = "large",
                            Name = "غرفات",
                            Priority = 3,
                            ShowInMenu = true
                        },
                        new
                        {
                            Id = 14,
                            ActionName = "ShopDefine",
                            CategoryId = 3,
                            Code = "ShopDefine",
                            ControllerName = "Market",
                            DialogSize = "medium",
                            Name = "تعریف غرفه",
                            Priority = 4,
                            ShowInMenu = false
                        },
                        new
                        {
                            Id = 15,
                            ActionName = "MarketStructures",
                            CategoryId = 3,
                            Code = "MarketStructures",
                            ControllerName = "Market",
                            DialogSize = "medium",
                            Name = "مدیریت ساختار بازارها",
                            Priority = 5,
                            ShowInMenu = true
                        },
                        new
                        {
                            Id = 16,
                            ActionName = "MarketStructureDefine",
                            CategoryId = 3,
                            Code = "MarketStructureDefine",
                            ControllerName = "Market",
                            DialogSize = "medium",
                            Name = "ایجاد و ویرایش ساختار بازار",
                            Priority = 6,
                            ShowInMenu = false
                        },
                        new
                        {
                            Id = 17,
                            ActionName = "Tariffs",
                            CategoryId = 4,
                            Code = "Tariffs",
                            ControllerName = "Market",
                            DialogSize = "large",
                            Name = "تعرفه ها",
                            Priority = 1,
                            ShowInMenu = true
                        },
                        new
                        {
                            Id = 18,
                            ActionName = "TariffDefine",
                            CategoryId = 4,
                            Code = "TariffDefine",
                            ControllerName = "Market",
                            DialogSize = "medium",
                            Name = "تعریف تعرفه غرفات",
                            Priority = 2,
                            ShowInMenu = false
                        },
                        new
                        {
                            Id = 19,
                            ActionName = "Customers",
                            CategoryId = 5,
                            Code = "Customers",
                            ControllerName = "Market",
                            DialogSize = "large",
                            Name = "مشتریان",
                            Priority = 1,
                            ShowInMenu = true
                        },
                        new
                        {
                            Id = 20,
                            ActionName = "CustomerDefine",
                            CategoryId = 5,
                            Code = "CustomerDefine",
                            ControllerName = "Market",
                            DialogSize = "medium",
                            Name = "تعریف مشتریان",
                            Priority = 2,
                            ShowInMenu = false
                        },
                        new
                        {
                            Id = 21,
                            ActionName = "CustomerCards",
                            CategoryId = 5,
                            Code = "CustomerCards",
                            ControllerName = "Market",
                            DialogSize = "medium",
                            Name = "کارت عضویت",
                            Priority = 3,
                            ShowInMenu = false
                        },
                        new
                        {
                            Id = 22,
                            ActionName = "CustomerCardDefine",
                            CategoryId = 5,
                            Code = "CustomerCardDefine",
                            ControllerName = "Market",
                            DialogSize = "medium",
                            Name = "تعریف کارت عضویت",
                            Priority = 4,
                            ShowInMenu = false
                        },
                        new
                        {
                            Id = 23,
                            ActionName = "Credits",
                            CategoryId = 5,
                            Code = "Credits",
                            ControllerName = "Market",
                            DialogSize = "large",
                            Name = "شارژهای اعتبار",
                            Priority = 5,
                            ShowInMenu = true
                        },
                        new
                        {
                            Id = 24,
                            ActionName = "CreditDefine",
                            CategoryId = 5,
                            Code = "CreditDefine",
                            ControllerName = "Market",
                            DialogSize = "medium",
                            Name = "ثبت شارژ اعتبار",
                            Priority = 6,
                            ShowInMenu = false
                        },
                        new
                        {
                            Id = 25,
                            ActionName = "Rents",
                            CategoryId = 4,
                            Code = "Rents",
                            ControllerName = "Market",
                            DialogSize = "large",
                            Name = "اجاره ها",
                            Priority = 3,
                            ShowInMenu = true
                        },
                        new
                        {
                            Id = 26,
                            ActionName = "RentDefine",
                            CategoryId = 4,
                            Code = "RentDefine",
                            ControllerName = "Market",
                            DialogSize = "medium",
                            Name = "ثبت اجاره غرفه",
                            Priority = 4,
                            ShowInMenu = true
                        },
                        new
                        {
                            Id = 27,
                            ActionName = "RentsDefine",
                            CategoryId = 4,
                            Code = "RentsDefine",
                            ControllerName = "Market",
                            DialogSize = "medium",
                            Name = "ثبت اجاره دسته ای غرفات",
                            Priority = 5,
                            ShowInMenu = true
                        });
                });

            modelBuilder.Entity("GeneralDAL.Database.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int?>("RentId")
                        .HasColumnType("int");

                    b.Property<int?>("ReserveId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RentId");

                    b.HasIndex("ReserveId");

                    b.ToTable("Payment","Mrk");
                });

            modelBuilder.Entity("GeneralDAL.Database.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("StrCode")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Person","Gnr");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            Code = 1,
                            FirstName = "مدیر",
                            LastName = "سیستم",
                            StrCode = "1"
                        });
                });

            modelBuilder.Entity("GeneralDAL.Database.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TypeId");

                    b.ToTable("Region","Gnr");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = 1,
                            Name = "ایران",
                            TypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Code = 4,
                            Name = "اصفهان",
                            ParentId = 1,
                            TypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            Code = 6,
                            Name = "اصفهان",
                            ParentId = 2,
                            TypeId = 3
                        });
                });

            modelBuilder.Entity("GeneralDAL.Database.Rent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int?>("MarketScheduleDetailId")
                        .HasColumnType("int");

                    b.Property<bool>("Paid")
                        .HasColumnType("bit");

                    b.Property<int?>("ShopId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MarketScheduleDetailId");

                    b.HasIndex("ShopId");

                    b.ToTable("Rent","Mrk");
                });

            modelBuilder.Entity("GeneralDAL.Database.Reserve", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int?>("MarketScheduleDetailId")
                        .HasColumnType("int");

                    b.Property<bool>("Paid")
                        .HasColumnType("bit");

                    b.Property<int?>("ShopId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MarketScheduleDetailId");

                    b.HasIndex("ShopId");

                    b.ToTable("Reserve","Mrk");
                });

            modelBuilder.Entity("GeneralDAL.Database.Shop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<int?>("MarketStructureId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("ShopGroupId")
                        .HasColumnType("int");

                    b.Property<string>("ShopIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MarketStructureId");

                    b.HasIndex("ShopGroupId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TypeId");

                    b.ToTable("Shop","Mrk");
                });

            modelBuilder.Entity("GeneralDAL.Database.ShopGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ShopGroup","Mrk");
                });

            modelBuilder.Entity("GeneralDAL.Database.Tariff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("EndDate")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Formula")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("RentAmount")
                        .HasColumnType("int");

                    b.Property<int>("ReserveAmount")
                        .HasColumnType("int");

                    b.Property<string>("StartDate")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("Tariff","Mrk");
                });

            modelBuilder.Entity("GeneralDAL.Database.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Tenant","Gnr");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = 1,
                            Name = "سازمان میادین میوه و تره بار و ساماندهی مشاغل شهری شهرداری اصفهان"
                        },
                        new
                        {
                            Id = 2,
                            Code = 2,
                            Name = "جمعه بازار بعثت",
                            ParentId = 1
                        });
                });

            modelBuilder.Entity("GeneralDAL.Database.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool>("ForceFirstLoginChange")
                        .HasColumnType("bit");

                    b.Property<string>("HashPassword")
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<string>("PasswordHint")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("TenantId");

                    b.ToTable("User","Sec");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            ForceFirstLoginChange = false,
                            HashPassword = "65bb559e8ed079554da6b55d4b6fec00",
                            PasswordHint = "nothing",
                            PersonId = 1,
                            TenantId = 1,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("GeneralDAL.Database.UserDefaultForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDefaultForm","Gnr");
                });

            modelBuilder.Entity("GeneralDAL.Database.UserSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HomeTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HomeTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSetting","Gnr");
                });

            modelBuilder.Entity("GeneralDAL.Database.BasicInformation", b =>
                {
                    b.HasOne("GeneralDAL.Database.BasicInformationCategory", "Category")
                        .WithMany("BasicInformations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeneralDAL.Database.BasicInformation", "RelatedBasicInformation")
                        .WithMany("BasicInformations")
                        .HasForeignKey("RelatedBasicInformationId");
                });

            modelBuilder.Entity("GeneralDAL.Database.BasicInformationCategory", b =>
                {
                    b.HasOne("GeneralDAL.Database.BasicInformationCategory", "RelatedCategory")
                        .WithMany("BasicInformationCategories")
                        .HasForeignKey("RelatedCategoryId");
                });

            modelBuilder.Entity("GeneralDAL.Database.Credit", b =>
                {
                    b.HasOne("GeneralDAL.Database.Customer", "Customer")
                        .WithMany("Credits")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeneralDAL.Database.BasicInformation", "PaymentType")
                        .WithMany("Credits")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GeneralDAL.Database.Customer", b =>
                {
                    b.HasOne("GeneralDAL.Database.JobGroup", "JobGroup")
                        .WithMany("Customers")
                        .HasForeignKey("JobGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GeneralDAL.Database.CustomerCard", b =>
                {
                    b.HasOne("GeneralDAL.Database.Customer", "Customer")
                        .WithMany("CustomerCards")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GeneralDAL.Database.GroupUser", b =>
                {
                    b.HasOne("GeneralDAL.Database.Group", "Group")
                        .WithMany("GroupUsers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeneralDAL.Database.User", "User")
                        .WithMany("GroupUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GeneralDAL.Database.Job", b =>
                {
                    b.HasOne("GeneralDAL.Database.JobGroup", "JobGroup")
                        .WithMany("Jobs")
                        .HasForeignKey("JobGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GeneralDAL.Database.LoginAttempt", b =>
                {
                    b.HasOne("GeneralDAL.Database.User", "User")
                        .WithMany("LoginAttempts")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("GeneralDAL.Database.LoginedData", b =>
                {
                    b.HasOne("GeneralDAL.Database.User", "User")
                        .WithMany("LoginedDatas")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("GeneralDAL.Database.MarketSchedule", b =>
                {
                    b.HasOne("GeneralDAL.Database.Tenant", "Market")
                        .WithMany("MarketSchedules")
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GeneralDAL.Database.MarketScheduleDetail", b =>
                {
                    b.HasOne("GeneralDAL.Database.MarketSchedule", "MarketSchedule")
                        .WithMany("MarketScheduleDetails")
                        .HasForeignKey("MarketScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GeneralDAL.Database.MarketStructure", b =>
                {
                    b.HasOne("GeneralDAL.Database.MarketStructure", "Parent")
                        .WithMany("MarketStructures")
                        .HasForeignKey("ParentId");

                    b.HasOne("GeneralDAL.Database.Tenant", "Tenant")
                        .WithMany("MarketStructures")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeneralDAL.Database.BasicInformation", "Type")
                        .WithMany("MarketStructures")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GeneralDAL.Database.MenuAccess", b =>
                {
                    b.HasOne("GeneralDAL.Database.Group", "Group")
                        .WithMany("MenuAccesses")
                        .HasForeignKey("GroupId");

                    b.HasOne("GeneralDAL.Database.MenuItem", "MenuItem")
                        .WithMany("MenuAccesses")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeneralDAL.Database.User", "User")
                        .WithMany("MenuAccesses")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("GeneralDAL.Database.MenuAction", b =>
                {
                    b.HasOne("GeneralDAL.Database.MenuItem", "MenuItem")
                        .WithMany("MenuActions")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GeneralDAL.Database.MenuActionAccess", b =>
                {
                    b.HasOne("GeneralDAL.Database.Group", "Group")
                        .WithMany("MenuActionAccesses")
                        .HasForeignKey("GroupId");

                    b.HasOne("GeneralDAL.Database.MenuAction", "MenuAction")
                        .WithMany("MenuActionAccesses")
                        .HasForeignKey("MenuActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeneralDAL.Database.User", "User")
                        .WithMany("MenuActionAccesses")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("GeneralDAL.Database.MenuItem", b =>
                {
                    b.HasOne("GeneralDAL.Database.MenuCategory", "Category")
                        .WithMany("MenuItems")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GeneralDAL.Database.Payment", b =>
                {
                    b.HasOne("GeneralDAL.Database.Rent", "Rent")
                        .WithMany("Payments")
                        .HasForeignKey("RentId");

                    b.HasOne("GeneralDAL.Database.Reserve", "Reserve")
                        .WithMany("Payments")
                        .HasForeignKey("ReserveId");
                });

            modelBuilder.Entity("GeneralDAL.Database.Region", b =>
                {
                    b.HasOne("GeneralDAL.Database.Region", "Parent")
                        .WithMany("Regions")
                        .HasForeignKey("ParentId");

                    b.HasOne("GeneralDAL.Database.BasicInformation", "Type")
                        .WithMany("Regions")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GeneralDAL.Database.Rent", b =>
                {
                    b.HasOne("GeneralDAL.Database.Customer", "Customer")
                        .WithMany("Rents")
                        .HasForeignKey("CustomerId");

                    b.HasOne("GeneralDAL.Database.MarketScheduleDetail", "MarketScheduleDetail")
                        .WithMany("Rents")
                        .HasForeignKey("MarketScheduleDetailId");

                    b.HasOne("GeneralDAL.Database.Shop", "Shop")
                        .WithMany("Rents")
                        .HasForeignKey("ShopId");
                });

            modelBuilder.Entity("GeneralDAL.Database.Reserve", b =>
                {
                    b.HasOne("GeneralDAL.Database.Customer", "Customer")
                        .WithMany("Reserves")
                        .HasForeignKey("CustomerId");

                    b.HasOne("GeneralDAL.Database.MarketScheduleDetail", "MarketScheduleDetail")
                        .WithMany("Reserves")
                        .HasForeignKey("MarketScheduleDetailId");

                    b.HasOne("GeneralDAL.Database.Shop", "Shop")
                        .WithMany("Reserves")
                        .HasForeignKey("ShopId");
                });

            modelBuilder.Entity("GeneralDAL.Database.Shop", b =>
                {
                    b.HasOne("GeneralDAL.Database.MarketStructure", "MarketStructure")
                        .WithMany("Shops")
                        .HasForeignKey("MarketStructureId");

                    b.HasOne("GeneralDAL.Database.ShopGroup", "ShopGroup")
                        .WithMany("Shops")
                        .HasForeignKey("ShopGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeneralDAL.Database.Tenant", "Tenant")
                        .WithMany("Shops")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeneralDAL.Database.BasicInformation", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("GeneralDAL.Database.Tenant", b =>
                {
                    b.HasOne("GeneralDAL.Database.Tenant", "Parent")
                        .WithMany("Tenants")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("GeneralDAL.Database.User", b =>
                {
                    b.HasOne("GeneralDAL.Database.Person", "Person")
                        .WithMany("PersonUser")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeneralDAL.Database.Tenant", "Tenant")
                        .WithMany("Users")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GeneralDAL.Database.UserDefaultForm", b =>
                {
                    b.HasOne("GeneralDAL.Database.MenuItem", "Form")
                        .WithMany("UserDefaultForms")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeneralDAL.Database.User", "User")
                        .WithMany("UserDefaultForms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GeneralDAL.Database.UserSetting", b =>
                {
                    b.HasOne("GeneralDAL.Database.BasicInformation", "HomeType")
                        .WithMany("UserSettings")
                        .HasForeignKey("HomeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeneralDAL.Database.User", "User")
                        .WithMany("UserSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
